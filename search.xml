<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Python多任务-线程</title>
      <link href="/2018/11/10/chang-lian-jie-he-duan-lian-jie/"/>
      <url>/2018/11/10/chang-lian-jie-he-duan-lian-jie/</url>
      
        <content type="html"><![CDATA[<pre><code>__author__ = &#39;Chen&#39;__date__ = &#39;2018/11/4 13:34&#39;import timeimport threading  # 多任务模块# 使用多任务让程序完成变长秋天不回来边跳脱衣舞def sing():    &#39;&#39;&#39;唱歌5秒钟&#39;&#39;&#39;    print(&#39;---正在唱秋天不回来&#39;)    time.sleep(1)def dance():    &#39;&#39;&#39;跳舞5秒钟&#39;&#39;&#39;    print(&#39;---正在跳脱衣舞&#39;)    time.sleep(1)def main():    t1 = threading.Thread(target=sing)  # 创建一个线程对象,指向sing函数,这里的sing不是调用而是指向    t2 = threading.Thread(target=dance)    t1.start()    t2.start()if __name__ == &#39;__main__&#39;:    main()&quot;&quot;&quot;执行流程:1:if__name__ == &#39;__main__&#39;2:调用main3:t1-&gt;创建一个实例对象,t2-&gt;创建一个实例对象4:t1.start()创建一个子线程,子线程执行sing函数.    t2.start()又创建了一个子线程,执行dance函数5:main()方法为主线程,如果先主线程执行完毕(t2之后已经没有任何代码),那么主线程等待子线程结束t1 = threading.Thread(target=sing)t2 = threading.Thread(target=dance)这两行代码仅仅是创建了一个普通的对象,并没有创建子线程start()方法才是创建子线程,并执行&quot;&quot;&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python多任务-线程2</title>
      <link href="/2018/11/10/python-duo-xian-cheng-2-1/"/>
      <url>/2018/11/10/python-duo-xian-cheng-2-1/</url>
      
        <content type="html"><![CDATA[<pre><code>import timeimport threading__author__ = &#39;Chen&#39;__date__ = &#39;2018/11/4 14:51&#39;class MyThread(threading.Thread):    &#39;&#39;&#39;    继承Thread类,重写run方法,在调用start()方法的时候,    线程会自动执行run方法里面的代码.    &#39;&#39;&#39;    def run(self):        for i in range(3):            time.sleep(1)            msg = &quot;当前线程的名字为:&quot; + self.name + &quot;@&quot; + str(i)  # name属性中保存的是当前线程的名字            print(msg)if __name__ == &#39;__main__&#39;:    t = MyThread()    # 创建了一个实例对象,只有一个线程    t.start()</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多任务 </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
